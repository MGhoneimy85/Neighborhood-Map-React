{"version":3,"sources":["logo.svg","components/MapWrapper/MapWrapper.js","components/Master/Master.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MapWrapper","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getVenueDetails","id","axios","get","apiURL","URLSearchParams","param","then","response","setState","selectedPlace","data","venue","catch","error","alert","console","log","onMarkerClick","marker","e","activeMarker","showingInfoWindow","onClose","state","markers","selected","bind","assertThisInitialized","client_id","client_secret","v","mapStyles","width","height","_this2","react_default","a","createElement","dist","google","zoom","style","center","lat","position","lng","onClick","initialCenter","map","item","index","location","key","tabindex","title","name","animation","maps","Animation","BOUNCE","icon","url","visible","aria-label","color","ratingColor","rating","Component","GoogleApiWrapper","apiKey","Master","getVenues","venues","groups","items","filteredVenues","isLoading","getGeoLocation","navigator","geolocation","getCurrentPosition","prevState","currentLatLng","objectSpread","coords","latitude","longitude","ll","menuOpen","noResults","query","toggleMenu","filterVenues","setSelected","fliteredArray","forEach","toLowerCase","includes","target","value","push","length","className","type","onChange","placeholder","tabIndex","components_MapWrapper_MapWrapper","src","logo","alt","App","components_Master_Master","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e303d1bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { Map, GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from 'axios';\n\n\nclass MapWrapper extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      markers:this.props.markers,\n      showingInfoWindow: false,  //Hides or the shows the infoWindow\n      activeMarker: {},          //Shows the active marker upon click\n      selectedPlace: this.props.selected,        //Shows the infoWindow to the selected place upon a marker\n    }\n    this.onMarkerClick = this.onMarkerClick.bind(this);\n    this.onMarkerClick = this.onMarkerClick.bind(this);\n    this.onClose = this.onClose.bind(this);\n    // foursquare variables\n    this.param = {\n      client_id: \"1CPFL1RI135SHQNHOTCT2HYAAXV3LK0SHR1RCIBVWOHMLZOF\",\n      client_secret: \"U5G4FEDYVEAHXJH3BSYYGNGPYTK1JKSNQVU3RPWRGHSYN3PV\",\n      v:'20190126'\n    }\n    this.apiURL = \"https://api.foursquare.com/v2/venues/\";\n\n    //map variables\n    this.mapStyles = {\n      width: '100%',\n      height: '100%'\n    };\n  }\n\n  // get place details rating to show it in info window\n  getVenueDetails = (id) => {\n    axios.get(this.apiURL + id +'?'+ new URLSearchParams(this.param))\n    .then(response => {\n      this.setState({\n        selectedPlace: response.data.response.venue\n      });\n    })\n    .catch(error => {\n      alert('ERROR!! from foursquare Qota Exceeded '+ error);\n      console.log(\"ERROR!! \" + error)\n    })\n  }\n\n  onMarkerClick = (props, marker , e) =>{\n    console.log(marker);\n    \n    //get selected marker venue details rating to display it in info window\n    this.getVenueDetails(marker.id);\n    // set selected marker selected venue show info window\n    this.setState({\n      activeMarker: marker,\n      showingInfoWindow: true\n    })\n  }\n    \n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        activeMarker: {},\n        showingInfoWindow: false\n      });\n    }\n  }\n\n  \n\n  render() {\n    return (\n        <Map\n        google={this.props.google}\n        zoom={13}\n        style={this.mapStyles}\n        center={{\n          lat: this.props.position.lat,\n          lng: this.props.position.lng\n        }}\n        onClick={this.onClose}\n        initialCenter={{\n          lat: this.props.position.lat,\n          lng: this.props.position.lng\n        }}\n      >\n       {this.props.markers.map((item,index) => (\n          <Marker\n                id={item.venue.id}\n                position={{lat: item.venue.location.lat, lng:item.venue.location.lng}}\n                key={index}\n                tabindex={index+2}\n                title={item.venue.name}\n                onClick={this.onMarkerClick}\n                name={item.venue.name}\n                animation={this.state.activeMarker.name === item.venue.name ? this.props.google.maps.Animation.BOUNCE : null  }\n                icon= { this.state.activeMarker.name === item.venue.name ? {url: \"https://maps.google.com/mapfiles/ms/icons/blue-dot.png\"} : ''}\n              />\n       ))}\n      \n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.onClose}\n        >\n          <div aria-label=\"title contianer\">\n            <h4>Title: {this.state.activeMarker.name}</h4>\n            <h4 style={{ color: '#'+ this.state.selectedPlace.ratingColor}}>Rating: {this.state.selectedPlace.rating}</h4>\n          </div>\n        </InfoWindow>\n      </Map>      \n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey:  'AIzaSyAxEHaeEZu0J6psDIhMBHEnwJ77jcxQoK0'\n})(MapWrapper)\n\nMapWrapper.propTypes = {\n  markers: PropTypes.array.isRequired,\n  position:PropTypes.object.isRequired,\n  selected:PropTypes.object.isRequired\n}\n","import React, { Component } from \"react\";\nimport  MapWrapper  from '../MapWrapper/MapWrapper.js';\nimport axios from 'axios';\nimport logo from '../../logo.svg';\n\n/* this component include header side menu and mapWrapper  */\nclass Master extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { menuOpen: false , \n                   venues: [] , \n                   filteredVenues: [] ,\n                   selectedPlace: {},\n                   isLoading: false,\n                   noResults: false,\n                   currentLatLng: {\n                      lat: 0,\n                      lng: 0\n                    }\n                  }\n    this.param = {\n      client_id: \"1CPFL1RI135SHQNHOTCT2HYAAXV3LK0SHR1RCIBVWOHMLZOF\",\n      client_secret: \"U5G4FEDYVEAHXJH3BSYYGNGPYTK1JKSNQVU3RPWRGHSYN3PV\",\n      query: \"food\",  // can be changed to any other category \n      ll: this.state.currentLatLng.lat+','+this.state.currentLatLng.lng,\n      v:'20190126'\n    }\n\n    this.apiURL = \"https://api.foursquare.com/v2/venues/explore?\";\n    this.toggleMenu = this.toggleMenu.bind(this);\n    this.filterVenues = this.filterVenues.bind(this);\n    this.setSelected = this.setSelected.bind(this);\n    \n  }\n  \n  componentDidMount() {\n    //get current location\n    this.getGeoLocation();\n  }\n\n  /*  get all food catgory places near your current location  */\n  getVenues = () => {\n    axios.get(this.apiURL + new URLSearchParams(this.param))\n      .then(response => {\n        this.setState({\n          venues: response.data.response.groups[0].items,\n          filteredVenues: response.data.response.groups[0].items,\n          selectedPlace: response.data.response.groups[0].items[0].venue,\n          isLoading: true\n        }, null);\n      })\n      .catch(error => {\n        console.log(\"ERROR!! \" + error)\n      })\n  }\n  \n  toggleMenu() {\n    // open close menu\n    this.setState(state => ({\n      menuOpen: !state.menuOpen\n    }));\n  }\n\n  // set selected \n  setSelected(param){\n    this.setState(state => ({\n      menuOpen: !state.menuOpen,\n      currentLatLng:{\n        lat:param.location.lat,\n        lng:param.location.lng\n      },\n      selectedPlace:param\n    }));\n  }\n\n  /*  get your current location landitude and langtidue to send them to map Wrapper amd to foursquare */\n  getGeoLocation = () => {\n    if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n            position => {\n                this.setState(prevState => ({\n                    currentLatLng: {\n                        ...prevState.currentLatLng,\n                        lat: position.coords.latitude,\n                        lng: position.coords.longitude\n                    }\n                }));\n                this.param.ll = position.coords.latitude+','+position.coords.longitude\n                this.getVenues()\n            } , alert('please activate location service') );\n    } else {\n      //if location service not available set a static location my location in egypt\n        this.param.ll = 30.06+','+30.95;\n        this.getVenues();\n    }\n  }\n\n\n  filterVenues(e){\n    this.setState({\n      filteredVenues: []\n    }, null);\n    let fliteredArray = [];\n    this.state.venues.forEach((item) => {\n      if(item.venue.name.toLowerCase().includes(e.target.value.toLowerCase())){\n        fliteredArray.push(item);\n      }\n    });\n    if(fliteredArray.length === 0){\n      this.setState({\n        filteredVenues: fliteredArray ,\n        noResults: true\n      }, null);\n    } else{\n      this.setState({\n        filteredVenues: fliteredArray ,\n        noResults: false\n      }, null);\n    }\n  }\n\n  render() {\n    \n    return (\n      <div className=\"container\">\n        <div className={this.state.menuOpen? 'side-menu open' : 'side-menu'} >\n          <input type=\"text\" onChange={this.filterVenues} placeholder=\"Filter Restaurants\" />\n          {this.state.noResults ? <div className=\"no-results\"> No results found </div> : null}\n          <div className=\"side-menu-items\">\n              {this.state.filteredVenues.map((item,index) => (<div key={index} className=\"side-menu-item\" onClick={() => this.setSelected(item.venue)} >{item.venue.name}</div>))}\n          </div>\n        </div>\n        <main className={this.state.menuOpen? 'open' : ''}>\n          <header> \n              <button id=\"nav-icon4\" tabIndex=\"1\" onClick={this.toggleMenu}  className={this.state.menuOpen? 'open' : ''}  >\n                <span></span><span></span><span></span>\n              </button>\n              <h3>Neighborhood Map React</h3>\n              \n          </header>\n          <section>\n            {\n              this.state.isLoading ? \n              <MapWrapper markers={this.state.filteredVenues} selected={this.state.selectedPlace} position={this.state.currentLatLng} /> \n              : \n              <div className=\"loading-div\">\n                  <div className=\"text\">\n                    Loading\n                  </div>\n                  <img src={logo} className=\"App-logo\" alt=\"logo\" />\n              </div>\n            }\n              <img src=\"https://icons.iconarchive.com/icons/designbolts/vector-foursquare/128/Foursquare-1-icon.png\"\n\t\t\t\t\tclassName=\"foursquarelogo\"\n\t\t\t\t \talt=\"foursquarelogo\"/>\n          </section>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default Master;\n","import React, { Component } from 'react';\nimport Master from './components/Master/Master.js';\n\nclass App extends Component {\n  render() {\n    return (<Master />);\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}