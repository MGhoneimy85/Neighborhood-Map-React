{"version":3,"sources":["components/MapWrapper/MapWrapper.js","components/Master/Master.js","App.js","serviceWorker.js","index.js"],"names":["mapStyles","width","height","MapWrapper","state","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","props","marker","e","_this","setState","onClose","console","log","this","react_default","a","createElement","dist","google","zoom","style","initialCenter","lat","lng","onClick","name","visible","Component","GoogleApiWrapper","apiKey","endPoint","parameters","client_id","client_secret","query","near","v","Master","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getVenues","axios","get","URLSearchParams","then","response","venues","data","groups","items","filteredVenues","catch","error","menuOpen","noResults","toggleMenu","bind","assertThisInitialized","filterVenues","fliteredArray","forEach","item","venue","toLowerCase","includes","target","value","push","length","className","type","onChange","placeholder","map","index","key","id","components_MapWrapper_MapWrapper","App","components_Master_Master","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1e843f4d.chunk.js","sourcesContent":["import { Map, GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\nimport React, { Component } from \"react\";\n\nconst mapStyles = {\n  width: '100%',\n  height: '100%'\n};\n\nconst API_KEY =  'AIzaSyAxEHaeEZu0J6psDIhMBHEnwJ77jcxQoK0';\n\nclass MapWrapper extends Component {\n  state = {\n    showingInfoWindow: false,  //Hides or the shows the infoWindow\n    activeMarker: {},          //Shows the active marker upon click\n    selectedPlace: {}          //Shows the infoWindow to the selected place upon a marker\n  }\n\n  componentDidMount() {\n    console.log(this.props);\n  }\n\n  \n\n  onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n  });\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  render() {\n    return (\n        <Map\n        google={this.props.google}\n        zoom={14}\n        style={mapStyles}\n        initialCenter={{\n          lat: 30.02561,\n          lng: 31.49550\n        }}\n      >\n        <Marker\n          onClick={this.onMarkerClick}\n          name={'Americana Plaza'}\n        />\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.onClose}\n        >\n          <div>\n            <h4>{this.state.selectedPlace.name}</h4>\n          </div>\n        </InfoWindow>\n      </Map>      \n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey:API_KEY\n})(MapWrapper)\n","import React, { Component } from \"react\";\nimport  MapWrapper  from '../MapWrapper/MapWrapper.js';\nimport axios from 'axios';\nconst endPoint = \"https://api.foursquare.com/v2/venues/explore?\"\nconst parameters = {\n    client_id: \"1CPFL1RI135SHQNHOTCT2HYAAXV3LK0SHR1RCIBVWOHMLZOF\",\n    client_secret: \"U5G4FEDYVEAHXJH3BSYYGNGPYTK1JKSNQVU3RPWRGHSYN3PV\",\n    query: \"coffee\",\n    near: \"Cairo\",\n    v: \"20182507\"\n}\n/* this component include header side menu and mapWrapper  */\nclass Master extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { menuOpen: false , \n                   venues: [] , \n                   filteredVenues: [] ,\n                   noResults: false\n                  };\n    this.toggleMenu = this.toggleMenu.bind(this);\n    this.filterVenues = this.filterVenues.bind(this);\n    \n  }\n  \n  componentDidMount() {\n    this.getVenues();\n  }\n\n  getVenues = () => {\n    axios.get(endPoint + new URLSearchParams(parameters))\n      .then(response => {\n        this.setState({\n          venues: response.data.response.groups[0].items,\n          filteredVenues: response.data.response.groups[0].items \n        }, null);\n      })\n      .catch(error => {\n        console.log(\"ERROR!! \" + error)\n      })\n  }\n\n  toggleMenu() {\n    this.setState(state => ({\n      menuOpen: !state.menuOpen\n    }));\n    console.log(this.state)\n  }\n\n  filterVenues(e){\n    this.setState({\n      filteredVenues: []\n    }, null);\n    let fliteredArray = [];\n    this.state.venues.forEach((item) => {\n      if(item.venue.name.toLowerCase().includes(e.target.value)){\n        fliteredArray.push(item);\n      }\n    });\n    if(fliteredArray.length === 0){\n      this.setState({\n        filteredVenues: fliteredArray ,\n        noResults: true\n      }, null);\n    } else{\n      this.setState({\n        filteredVenues: fliteredArray ,\n        noResults: false\n      }, null);\n    }\n  }\n\n  render() {\n    \n    return (\n      <div className=\"container\">\n        <div className={this.state.menuOpen? 'side-menu open' : 'side-menu'} >\n          <input type=\"text\" onChange={this.filterVenues} placeholder=\"filter\" />\n          {this.state.noResults ? <div className=\"no-results\"> No results found </div> : null}\n          <div className=\"side-menu-items\">\n              {this.state.filteredVenues.map((item,index) => (<div key={index} className=\"side-menu-item\" >{item.venue.name}</div>))}\n          </div>\n        </div>\n        <main className={this.state.menuOpen? 'open' : ''}>\n          <header> \n              <div id=\"nav-icon4\" onClick={this.toggleMenu}  className={this.state.menuOpen? 'open' : ''}  >\n                <span></span><span></span><span></span>\n              </div>\n              Neighborhood Map React\n          </header>\n          <section>\n              <MapWrapper />\n          </section>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default Master;\n","import React, { Component } from 'react';\nimport Master from './components/Master/Master.js';\n\nclass App extends Component {\n  render() {\n    return (<Master />);\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}