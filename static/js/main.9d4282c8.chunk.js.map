{"version":3,"sources":["logo.svg","components/MapWrapper/MapWrapper.js","components/Master/Master.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","mapStyles","width","height","MapWrapper","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onMarkerClick","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","onClose","state","markers","bind","assertThisInitialized","console","log","_this2","react_default","a","createElement","dist","google","zoom","style","initialCenter","lat","position","lng","map","item","index","ref","venue","id","location","key","title","name","onClick","venu","visible","Component","GoogleApiWrapper","apiKey","Master","getVenues","param","axios","get","apiURL","URLSearchParams","then","response","venues","data","groups","items","filteredVenues","catch","error","getGeoLocation","navigator","geolocation","getCurrentPosition","coords","prevState","currentLatLng","objectSpread","latitude","longitude","ll","menuOpen","noResults","client_id","client_secret","query","v","toggleMenu","filterVenues","fliteredArray","forEach","toLowerCase","includes","target","value","push","length","className","type","onChange","placeholder","components_MapWrapper_MapWrapper","src","logo","alt","App","components_Master_Master","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9d4282c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { Map, GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst mapStyles = {\n  width: '100%',\n  height: '100%'\n};\n\nconst API_KEY =  'AIzaSyAxEHaeEZu0J6psDIhMBHEnwJ77jcxQoK0';\n\nclass MapWrapper extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      markers:this.props.markers,\n      showingInfoWindow: false,  //Hides or the shows the infoWindow\n      activeMarker: {},          //Shows the active marker upon click\n      selectedPlace: {},        //Shows the infoWindow to the selected place upon a marker\n    }\n    this.onMarkerClick = this.onMarkerClick.bind(this);\n    this.onMarkerClick = this.onMarkerClick.bind(this);\n    this.onClose = this.onClose.bind(this);\n    \n  }\n  \n\n  componentDidMount() {\n    console.log(this.props);\n    console.log(this.state);\n  }\n\n  onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n  })\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  }\n\n\n  render() {\n    return (\n        <Map\n        google={this.props.google}\n        zoom={14}\n        style={mapStyles}\n        initialCenter={{\n          lat: this.props.position.lat,\n          lng: this.props.position.lng\n        }}\n      >\n       {this.props.markers.map((item,index) => (\n          <Marker\n                ref={item.venue.id}\n                position={{lat: item.venue.location.lat, lng:item.venue.location.lng}}\n                key={index}\n                title={item.venue.name}\n                onClick={this.onMarkerClick}\n                name={item.venu}\n              />\n       ))}\n      \n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.onClose}\n        >\n          <div>\n            <h4>{this.state.selectedPlace.name}</h4>\n          </div>\n        </InfoWindow>\n      </Map>      \n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey:API_KEY\n})(MapWrapper)\n\nMapWrapper.propTypes = {\n  markers: PropTypes.array.isRequired,\n  position:PropTypes.object.isRequired\n}\n","import React, { Component } from \"react\";\nimport  MapWrapper  from '../MapWrapper/MapWrapper.js';\nimport axios from 'axios';\nimport logo from '../../logo.svg';\n\n/* this component include header side menu and mapWrapper  */\nclass Master extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { menuOpen: false , \n                   venues: [] , \n                   filteredVenues: [] ,\n                   noResults: false,\n                   currentLatLng: {\n                      lat: 0,\n                      lng: 0\n                    }\n                  }\n    this.param = {\n      client_id: \"1CPFL1RI135SHQNHOTCT2HYAAXV3LK0SHR1RCIBVWOHMLZOF\",\n      client_secret: \"U5G4FEDYVEAHXJH3BSYYGNGPYTK1JKSNQVU3RPWRGHSYN3PV\",\n      query: \"food\",\n      ll: this.state.currentLatLng.lat+','+this.state.currentLatLng.lng,\n      v:'20190126'\n    }\n\n    this.apiURL = \"https://api.foursquare.com/v2/venues/explore?\";\n    this.toggleMenu = this.toggleMenu.bind(this);\n    this.filterVenues = this.filterVenues.bind(this);\n    \n  }\n  \n  componentDidMount() {\n    this.getGeoLocation();\n  }\n\n  getVenues = () => {\n    console.log(this.param) ; \n    axios.get(this.apiURL + new URLSearchParams(this.param))\n      .then(response => {\n        this.setState({\n          venues: response.data.response.groups[0].items,\n          filteredVenues: response.data.response.groups[0].items \n        }, null);\n      })\n      .catch(error => {\n        console.log(\"ERROR!! \" + error)\n      })\n  }\n\n  toggleMenu() {\n    this.setState(state => ({\n      menuOpen: !state.menuOpen\n    }));\n    console.log(this.state)\n  }\n\n  getGeoLocation = () => {\n    if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n            position => {\n                console.log(position.coords);\n                this.setState(prevState => ({\n                    currentLatLng: {\n                        ...prevState.currentLatLng,\n                        lat: position.coords.latitude,\n                        lng: position.coords.longitude\n                    }\n                }));\n                this.param.ll = position.coords.latitude+','+position.coords.longitude\n                this.getVenues()\n            });\n    } else {\n        console.log('error');\n    }\n  }\n  filterVenues(e){\n    this.setState({\n      filteredVenues: []\n    }, null);\n    let fliteredArray = [];\n    this.state.venues.forEach((item) => {\n      if(item.venue.name.toLowerCase().includes(e.target.value.toLowerCase())){\n        fliteredArray.push(item);\n      }\n    });\n    if(fliteredArray.length === 0){\n      this.setState({\n        filteredVenues: fliteredArray ,\n        noResults: true\n      }, null);\n    } else{\n      this.setState({\n        filteredVenues: fliteredArray ,\n        noResults: false\n      }, null);\n    }\n  }\n\n  render() {\n    \n    return (\n      <div className=\"container\">\n        <div className={this.state.menuOpen? 'side-menu open' : 'side-menu'} >\n          <input type=\"text\" onChange={this.filterVenues} placeholder=\"filter\" />\n          {this.state.noResults ? <div className=\"no-results\"> No results found </div> : null}\n          <div className=\"side-menu-items\">\n              {this.state.filteredVenues.map((item,index) => (<div key={index} className=\"side-menu-item\" >{item.venue.name}</div>))}\n          </div>\n        </div>\n        <main className={this.state.menuOpen? 'open' : ''}>\n          <header> \n              <div id=\"nav-icon4\" onClick={this.toggleMenu}  className={this.state.menuOpen? 'open' : ''}  >\n                <span></span><span></span><span></span>\n              </div>\n              Neighborhood Map React\n          </header>\n          <section>\n            {\n              this.state.filteredVenues.length > 0 ? \n              <MapWrapper markers={this.state.filteredVenues} position={this.state.currentLatLng} /> \n              : \n              <div className=\"loading-div\">\n                  <div className=\"text\">\n                    Loading\n                  </div>\n                  <img src={logo} className=\"App-logo\" alt=\"logo\" />\n              </div>\n            }\n              \n          </section>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default Master;\n","import React, { Component } from 'react';\nimport Master from './components/Master/Master.js';\n\nclass App extends Component {\n  render() {\n    return (<Master />);\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}