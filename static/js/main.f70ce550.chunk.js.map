{"version":3,"sources":["logo.svg","components/MapWrapper/MapWrapper.js","components/Master/Master.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","mapStyles","width","height","MapWrapper","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getVenueDetails","id","axios","get","apiURL","URLSearchParams","param","then","response","setState","selectedPlace","data","venue","console","log","state","catch","error","alert","onMarkerClick","marker","e","selectedItem","markers","forEach","item","name","toLowerCase","includes","title","activeMarker","showingInfoWindow","onClose","selected","bind","assertThisInitialized","client_id","client_secret","v","prevProps","_this2","react_default","a","createElement","dist","google","zoom","style","centerAroundCurrentLocation","onClick","initialCenter","lat","position","lng","map","index","location","key","animation","maps","Animation","BOUNCE","icon","url","visible","aria-label","color","ratingColor","rating","Component","GoogleApiWrapper","apiKey","Master","getVenues","venues","groups","items","filteredVenues","isLoading","getGeoLocation","navigator","geolocation","getCurrentPosition","coords","prevState","currentLatLng","objectSpread","latitude","longitude","ll","menuOpen","noResults","query","toggleMenu","filterVenues","setSelected","fliteredArray","target","value","push","length","className","type","onChange","placeholder","components_MapWrapper_MapWrapper","src","logo","alt","App","components_Master_Master","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f70ce550.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { Map, GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from 'axios';\nconst mapStyles = {\n  width: '100%',\n  height: '100%'\n};\n\nconst API_KEY =  'AIzaSyAxEHaeEZu0J6psDIhMBHEnwJ77jcxQoK0';\n\nclass MapWrapper extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      markers:this.props.markers,\n      showingInfoWindow: false,  //Hides or the shows the infoWindow\n      activeMarker: {},          //Shows the active marker upon click\n      selectedPlace: this.props.selected,        //Shows the infoWindow to the selected place upon a marker\n    }\n    this.onMarkerClick = this.onMarkerClick.bind(this);\n    this.onMarkerClick = this.onMarkerClick.bind(this);\n    this.onClose = this.onClose.bind(this);\n    this.param = {\n      client_id: \"1CPFL1RI135SHQNHOTCT2HYAAXV3LK0SHR1RCIBVWOHMLZOF\",\n      client_secret: \"U5G4FEDYVEAHXJH3BSYYGNGPYTK1JKSNQVU3RPWRGHSYN3PV\",\n      v:'20190126'\n    }\n\n    this.apiURL = \"https://api.foursquare.com/v2/venues/\";\n    \n  }\n  \n  getVenueDetails = (id) => {\n    axios.get(this.apiURL + id +'?'+ new URLSearchParams(this.param))\n    .then(response => {\n      this.setState({\n        selectedPlace: response.data.response.venue\n      });\n      console.log(response);\n      console.log(this.state.selectedPlace);\n    })\n    .catch(error => {\n      alert('error from foursquare qota eceeded '+ error);\n      console.log(\"ERROR!! \" + error)\n    })\n  }\n\n  componentDidMount() {\n    console.log(this.props);\n    console.log(this.state);\n  }\n\n componentDidUpdate(props, prevProps){\n    console.log('NEW UPDATE'+ this.state);\n\n    // if (props.selected !== prevProps.selected) {\n    //   this.getVenueDetails(this.props.selected.id);\n    // }\n  }\n\n  onMarkerClick = (props, marker , e) =>{\n    console.log(marker);\n    let selectedItem = {};\n    this.state.markers.forEach((item) => {\n      if(item.venue.name.toLowerCase().includes(marker.title.toLowerCase())){\n        selectedItem = item;\n      }\n    });\n\n    this.getVenueDetails(selectedItem.venue.id);\n\n    this.setState({\n      activeMarker: marker,\n      selectedPlace:selectedItem.venue,\n      showingInfoWindow: true\n    })\n  }\n    \n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        activeMarker: {},\n        showingInfoWindow: false\n      });\n    }\n  }\n\n\n  render() {\n    return (\n        <Map\n        google={this.props.google}\n        zoom={13}\n        style={mapStyles}\n        centerAroundCurrentLocation={true}\n          onClick={this.onClose}\n        initialCenter={{\n          lat: this.props.position.lat,\n          lng: this.props.position.lng\n        }}\n      >\n       {this.props.markers.map((item,index) => (\n          <Marker\n                id={item.venue.id}\n                position={{lat: item.venue.location.lat, lng:item.venue.location.lng}}\n                key={index}\n                title={item.venue.name}\n                onClick={this.onMarkerClick}\n                name={item.venue.name}\n                animation={this.state.activeMarker.name === item.venue.name ? this.props.google.maps.Animation.BOUNCE : null  }\n                icon= { this.state.activeMarker.name === item.venue.name ? {url: \"https://maps.google.com/mapfiles/ms/icons/blue-dot.png\"} : ''}\n              />\n       ))}\n      \n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.onClose}\n\n        >\n          <div aria-label=\"title contianer\">\n            <h4>Title: {this.state.selectedPlace.name}</h4>\n            <h4 style={{ color: '#'+ this.state.selectedPlace.ratingColor}}>Rating: {this.state.selectedPlace.rating}</h4>\n          </div>\n        </InfoWindow>\n      </Map>      \n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey:API_KEY\n})(MapWrapper)\n\nMapWrapper.propTypes = {\n  markers: PropTypes.array.isRequired,\n  position:PropTypes.object.isRequired,\n  selected:PropTypes.object.isRequired\n}\n","import React, { Component } from \"react\";\nimport  MapWrapper  from '../MapWrapper/MapWrapper.js';\nimport axios from 'axios';\nimport logo from '../../logo.svg';\n\n/* this component include header side menu and mapWrapper  */\nclass Master extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { menuOpen: false , \n                   venues: [] , \n                   filteredVenues: [] ,\n                   selectedPlace: {},\n                   isLoading: false,\n                   noResults: false,\n                   currentLatLng: {\n                      lat: 0,\n                      lng: 0\n                    }\n                  }\n    this.param = {\n      client_id: \"1CPFL1RI135SHQNHOTCT2HYAAXV3LK0SHR1RCIBVWOHMLZOF\",\n      client_secret: \"U5G4FEDYVEAHXJH3BSYYGNGPYTK1JKSNQVU3RPWRGHSYN3PV\",\n      query: \"food\",\n      ll: this.state.currentLatLng.lat+','+this.state.currentLatLng.lng,\n      v:'20190126'\n    }\n\n    this.apiURL = \"https://api.foursquare.com/v2/venues/explore?\";\n    this.toggleMenu = this.toggleMenu.bind(this);\n    this.filterVenues = this.filterVenues.bind(this);\n    this.setSelected = this.setSelected.bind(this);\n    \n  }\n  \n  componentDidMount() {\n    this.getGeoLocation();\n  }\n\n  /*  get all food catgory places near your current location  */\n  getVenues = () => {\n    console.log(this.param) ; \n    axios.get(this.apiURL + new URLSearchParams(this.param))\n      .then(response => {\n        this.setState({\n          venues: response.data.response.groups[0].items,\n          filteredVenues: response.data.response.groups[0].items,\n          selectedPlace: response.data.response.groups[0].items[0].venue,\n          isLoading: true\n        }, null);\n      })\n      .catch(error => {\n        console.log(\"ERROR!! \" + error)\n      })\n  }\n  \n  toggleMenu() {\n    this.setState(state => ({\n      menuOpen: !state.menuOpen\n    }));\n  }\n\n  setSelected(param){\n    this.setState(state => ({\n      menuOpen: !state.menuOpen,\n      selectedPlace:param\n    }));\n    console.log(this.state);\n  }\n\n  /*  get your current location landitude and langtidue to send them to map Wrapper amd to foursquare */\n  getGeoLocation = () => {\n    if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n            position => {\n                console.log(position.coords);\n                this.setState(prevState => ({\n                    currentLatLng: {\n                        ...prevState.currentLatLng,\n                        lat: position.coords.latitude,\n                        lng: position.coords.longitude\n                    }\n                }));\n                this.param.ll = position.coords.latitude+','+position.coords.longitude\n                this.getVenues()\n            } , alert('please activate location service') );\n    } else {\n      //if location service not available set a static location my location in egypt\n        this.param.ll = 30.06+','+30.95;\n        this.getVenues();\n    }\n  }\n\n\n  filterVenues(e){\n    this.setState({\n      filteredVenues: []\n    }, null);\n    let fliteredArray = [];\n    this.state.venues.forEach((item) => {\n      if(item.venue.name.toLowerCase().includes(e.target.value.toLowerCase())){\n        fliteredArray.push(item);\n      }\n    });\n    if(fliteredArray.length === 0){\n      this.setState({\n        filteredVenues: fliteredArray ,\n        noResults: true\n      }, null);\n    } else{\n      this.setState({\n        filteredVenues: fliteredArray ,\n        noResults: false\n      }, null);\n    }\n  }\n\n  render() {\n    \n    return (\n      <div className=\"container\">\n        <div className={this.state.menuOpen? 'side-menu open' : 'side-menu'} >\n          <input type=\"text\" onChange={this.filterVenues} placeholder=\"filter\" />\n          {this.state.noResults ? <div className=\"no-results\"> No results found </div> : null}\n          <div className=\"side-menu-items\">\n              {this.state.filteredVenues.map((item,index) => (<div key={index} className=\"side-menu-item\" onClick={() => this.setSelected(item.venue)} >{item.venue.name}</div>))}\n          </div>\n        </div>\n        <main className={this.state.menuOpen? 'open' : ''}>\n          <header> \n              <div id=\"nav-icon4\" onClick={this.toggleMenu}  className={this.state.menuOpen? 'open' : ''}  >\n                <span></span><span></span><span></span>\n              </div>\n              Neighborhood Map React\n          </header>\n          <section>\n            {\n              this.state.isLoading ? \n              <MapWrapper markers={this.state.filteredVenues} selected={this.state.selectedPlace} position={this.state.currentLatLng} /> \n              : \n              <div className=\"loading-div\">\n                  <div className=\"text\">\n                    Loading\n                  </div>\n                  <img src={logo} className=\"App-logo\" alt=\"logo\" />\n              </div>\n            }\n              <img src=\"https://icons.iconarchive.com/icons/designbolts/vector-foursquare/128/Foursquare-1-icon.png\"\n\t\t\t\t\tclassName=\"foursquarelogo\"\n\t\t\t\t \talt=\"foursquarelogo\"/>\n          </section>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default Master;\n","import React, { Component } from 'react';\nimport Master from './components/Master/Master.js';\n\nclass App extends Component {\n  render() {\n    return (<Master />);\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}